generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model BarberShop {
  id          String              @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  services    BarberShopService[]
  created_At  DateTime            @default(now())
  updated_At  DateTime            @updatedAt

  @@map("barber_shops")
}

model BarberShopService {
  id            String     @id @default(uuid())
  name          String
  description   String
  imageUrl      String
  price         Decimal    @db.Decimal(10, 2)
  barberShop_id String
  barbershop    BarberShop @relation(fields: [barberShop_id], references: [id])
  booking       Booking[]

  @@map("barber_shop_services")
}

model Booking {
  id         String            @id @default(uuid())
  user_id    String
  user       User              @relation(fields: [user_id], references: [id])
  service_id String
  service    BarberShopService @relation(fields: [service_id], references: [id])
  date       DateTime
  created_At DateTime          @default(now())
  updated_At DateTime          @updatedAt

  @@map("bookings")
}
